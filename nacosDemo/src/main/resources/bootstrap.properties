# 模块名必须在这里
spring.application.name=nacosDemo
# nacos server配置中心地址
spring.cloud.nacos.config.server-addr=192.168.56.1:8848
# 配置中心文件后缀，默认是properties
# dataid的格式是prefix-active-extension,可见官方文档
spring.cloud.nacos.config.file-extension=properties
# nacos 命名空间
spring.cloud.nacos.config.namespace=testSpace
# nacos server注册中心地址
spring.cloud.nacos.discovery.server-addr=192.168.56.1:8848
spring.cloud.nacos.discovery.namespace=testSpace

# 服务注册
# Nacos Client会通过发送请求到Nacos Server注册自己的服务，提供自身元数据，包括IP地址，端口，applicationName等信息
# 服务注册成功后，Nacos Client定时发送一个心跳信息，说明服务处于可用状态。默认5s发送一次心跳
# server也会定时地检查注册服务实例的健康状况
# nacos命名空间，分组，DataId，服务之间的关系
# namespace在实际使用中，可以区分部署环境，比如说开发，测试，生产环境，就可以创建三个命名空间，不同
# 的命名空间之间是隔离的
# nacos默认命名空间是public
# 一个服务可以对应一个集群，不只是单个实例。运行多个实例，其实就是一个jar包运行多次
# 处在同一个namespace下的服务还可以继续用group进行隔离，这样可以在namespace的基础上提供更小粒度的隔离
# 一个服务可以有多个实例，一个group可以有多种服务
# 在后台的服务列表里，点击“服务详情”可以看到每个服务下的多个实例，对特定的实例还可以选择下线操作：
# https://blog.csdn.net/qq_45875349/article/details/141932863

# 服务发现
# Nacos Client（服务消费者）在调用服务提供的服务时，会发送请求给Server，获取上面注册的服务清单，并缓存在Client本地
# 同时会Client的本地开启一个定时任务，拉去服务最新的注册表信息更新到本地缓存
# 调用时，是使用application.name指定的名字

# 配置中心
# 一个配置文件由命名空间，分组ID，DataId来标识。这个DataId在创建时取项目的name
# 如果是配置中心，可以在不同namespace里创建相同名称的Properties，甚至可以在同一个namespace里创建同名的properties，但不同组
# 如果你的实例想切换环境，就切换namespace，想在同一环境切换，就切换组名
# 服务发现也是一样的，特定的{namespace, group}组合可以加入特定的集群

# nacos实现负载均衡
# 以前可以使用Netflix的Ribbon来实现负载均衡，现在可以选择使用Spring Cloud LoadBalancer，这是SpringCloud提供的解决方案
# 可以结合Nacos使用。只需要保证引入了nacos的注册中心依赖和引入了loadbalancer依赖即可使用
# 而后，在nacos后台，调整每个服务的不同的实例的权重，即可完成负载均衡的控制
